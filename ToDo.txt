**************************************************
**************************************************
20.09.2013
**************************************************
Se debe controlar si lo que se hizo en factor (leer un token mas) es correcto. Mirar las consecuencias. Por ejemplo con proposicion_e_s.
Se debe recordar que en C++ no se permite lo siguiente:
int a(){return 0;}
void main(){
	int a;
	int b = a();
	}
El compilador mostrará el siguiente mensajes: "error: 'a' cannot be used as funciont."
Otra forma de solucionarlo sin tener que leer otro token, es leer el identificador, si se encuentra en la tabla continuo, si no se encuentra en la tabla marco error. Si existe elemento en la tabla controlo el tipo de identificador del nivel mas cercano (Si es una funcion será TIPOFUNC y se espera que sea acompañado por un '('. Si es una variable se continua normalmente.

Cuando se hace la llamada a funcion se controla si existe en la tabla y muestra error, pero al seguir analizando cuando intenta buscar cuantos parametro formales tiene la funcion que NO EXISTE obtenemos un 'segmentation fault'. Se debe controlar que dicha funcion se encuentre en la tabla y sea una funcion. Mirar linea 1045.
Tener cuidado con proposicion_e_s ya que: 1) no se le da valor a ultimoId cuando lee el identificador, 2) No se considera que variable() no avanza el proximo token.
El siguiente programa fuente no muestra error cuando deberia: "void f(){} void main(){f=3;}" Deberia decir que el identificador f hace referencia a una funcion y no a una variable.
